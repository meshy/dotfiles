setopt INTERACTIVECOMMENTS
# Above command explicitly enables comments starting with `#` in zsh

############
# SETTINGS #
############

export EDITOR="nvim"
export MANPAGER="most"

# Disable zsh autocorrect
unsetopt correct_all

# Enable timestamps in history
setopt extendedhistory

# Back and forward through commands with CTRL-left/right
bindkey '5D' emacs-backward-word
bindkey '5C' emacs-forward-word
export WORDCHARS=''

# Pew (replaces virtualenvwrapper)
export WORKON_HOME=~/venvs

# Go
export GOPATH=~/code/go

# Python (avoid pyc files)
export PYTHONDONTWRITEBYTECODE=1

# PATH
if [[ "$SHLVL" == "1" ]]; then
    # Python (pip install --user)
    PATH="$HOME/.local/bin:$PATH"

    # Ruby
    eval "$(rbenv init -)"

    # Rust
    PATH="$HOME/.cargo/bin:$PATH"

    # Heroku
    PATH="/usr/local/heroku/bin:$PATH"

    # Go
    PATH="$PATH:$GOPATH/bin"
fi

# fzf (fuzzy finder)
# CTRL-R overrides history search.
# CTRL-T dumps the searched path into the current command
# ALT-C changes directory. This is a PITA.
export FZF_DEFAULT_COMMAND='ag --hidden --ignore-dir=".git" --filename-pattern ""'
source /usr/share/fzf/key-bindings.zsh
source /usr/share/fzf/completion.zsh

###########
# ALIASES #
###########

alias ag='ag --hidden --ignore-dir=".git"'
alias ig='ag --hidden --ignore-dir=".git" --ignore migrations'
alias b='black'
alias ccat='bat'
alias f='flake8 . --exclude=node_modules'
alias fix='stty sane'
alias e='neomutt && notmuch new'
alias g='git'
alias m="make test"
alias mf="make testfast"
alias m2="make test VERBOSITY=2"
alias open='xdg-open'
alias pi="pip install"
alias t='tree -I "__pycache__|*.pyc" -C --dirsfirst'
alias vim='nvim'
alias vi='nvim'
alias v='nvim'
alias wo='pew workon'
alias fig='docker-compose'
alias reload='source ~/.zshrc'

# Alias hub to git, passing all args.
alias git=hub

# Bash Directory browsing shortcuts
alias k='tree'
alias ltr='ls -ltr'
alias r='screen -D -R'
alias ls='ls --color'
alias l='ls -lh'
alias ll='ls -la'

# Taskwarrior
alias ta='task add'

# Subpixel ordering for rotated monitors
alias vbgr="gsettings set org.gnome.settings-daemon.plugins.xsettings rgba-order 'vbgr'"
alias vrgb="gsettings set org.gnome.settings-daemon.plugins.xsettings rgba-order 'vbgr'"
alias rgb="gsettings set org.gnome.settings-daemon.plugins.xsettings rgba-order 'rgb'"
alias desk="vbgr"
alias laptop="rgb"

# How meta is this?!
alias cdd='cd ~/personal/dotfiles'

# Weather on the moon...
alias moon='curl wttr.in/moon'

# Dictionary/Thesaurus
alias dict="sdcv --color"

# Work around the infernal ghostscript
alias gs="git status"

# Display an image in the terminal. Only works in kitty.
alias img="kitty icat"

# Fix consequences of strange TERM when using kitty to ssh.
alias ksh="kitty +kitten ssh"

# Open a file in vim with CTRL-P
bindkey -s ^p '^Uvim $(fzf)^M'

#############
# FUNCTIONS #
#############

function af {
    defaultpath=.
    find ${2:-$defaultpath} ! -iwholename '*.git*' | grep ${1}
}

# Open search results in vim
function vag {
    search_term=$@
    _files=$(ag --hidden --files-with-matches --ignore-dir=".git" $search_term | sort | xargs)
    if [[ $_files != "" ]]; then
        echo "nvim $_files +/${search_term}"
        nvim $(echo $_files) +/${search_term}
    else
        echo "No results."
    fi
}

# Create a virtual environment.
function _mkvenv {
    name="${1}"
    _python="${2}"
    pew new $name \
        -a "$(pwd)" \
        -p "$_python" \
        -i pip \
        -i setuptools \
        -i wheel \
        -i neovim \
        -i flake8 \
        -i isort \
        -i "${3:-ipython}"
}
function mkvenv3 {
    defaultname=`basename $PWD`
    _mkvenv "${1:-$defaultname}" "$(which python3)"
}
function mkvenv2 {
    defaultname=`basename $PWD`
    _mkvenv "${1:-$defaultname}" "$(which python2)" "ipython<6"
}


# Install requirements with pip
function pp {
    defaultfile='requirements.txt'
    requirementsfile=${1:-$defaultfile}
    pi -r $requirementsfile
}

# Check the weather!
function weather {
    defaultcity='oxford'
    curl wttr.in/${1:-$defaultcity}\?m
}

function mkmodule {
    if [[ $# -eq 0 ]] ; then
        echo 'Module path required: `mkmodule path/to/module`'
    else
        mkdir $1
        touch $1/__init__.py
    fi
}


# Syntax highlighting needs to be at the end
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

#######
# FUN #
#######


if [[ "$SHLVL" == "1" ]]; then
    echo -n 'Todo: '
    task next
fi

# Default to ~/code/ directory
# Skip if already not in ~
if [ "$(pwd)" = "$HOME" ]; then
    cd ~/code/
fi
